name: GitGuardian Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for better analysis
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache GitGuardian binary
      id: cache-gitguardian
      uses: actions/cache@v3
      with:
        path: ~/bin/gitguardian
        key: gitguardian-${{ runner.os }}-v1.0.0

    - name: Download GitGuardian
      if: steps.cache-gitguardian.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/bin
        # Replace with actual download URL when available
        # For now, we'll build from source
        echo "Building GitGuardian from source..."
        # This would be replaced with actual binary download
        go build -o ~/bin/gitguardian ./cmd/gitguardian
        chmod +x ~/bin/gitguardian

    - name: Add GitGuardian to PATH
      run: echo "$HOME/bin" >> $GITHUB_PATH

    - name: Run GitGuardian Security Scan
      id: scan
      run: |
        echo "üîç Running GitGuardian security scan..."
        
        # Determine scan scope based on event type
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Scanning changed files in PR..."
          # Get list of changed files in PR
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt
          if [ -s changed_files.txt ]; then
            # Create temp directory with only changed files
            mkdir -p /tmp/scan_files
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                mkdir -p "/tmp/scan_files/$(dirname "$file")"
                cp "$file" "/tmp/scan_files/$file"
              fi
            done < changed_files.txt
            gitguardian -path /tmp/scan_files -format json > scan_results.json
          else
            echo "No files to scan"
            echo '{"issues": [], "summary": {"total": 0}}' > scan_results.json
          fi
        else
          echo "Scanning entire repository..."
          gitguardian -path . -format json > scan_results.json
        fi
        
        # Check if scan found issues
        ISSUES_COUNT=$(jq '.summary.total' scan_results.json)
        echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$ISSUES_COUNT" -gt 0 ]; then
          echo "‚ùå Security issues found: $ISSUES_COUNT"
          exit 1
        else
          echo "‚úÖ No security issues found"
        fi

    - name: Upload scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gitguardian-scan-results
        path: scan_results.json
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('scan_results.json', 'utf8'));
            const issuesCount = results.summary.total;
            
            let comment = '## üîç GitGuardian Security Scan Results\n\n';
            
            if (issuesCount === 0) {
              comment += '‚úÖ **No security issues found!**\n\n';
              comment += 'All files in this PR have been scanned and no security vulnerabilities were detected.';
            } else {
              comment += `‚ùå **${issuesCount} security issue(s) found**\n\n`;
              comment += '### Issues Summary:\n';
              comment += `- Critical: ${results.summary.critical}\n`;
              comment += `- High: ${results.summary.high}\n`;
              comment += `- Medium: ${results.summary.medium}\n`;
              comment += `- Low: ${results.summary.low}\n\n`;
              
              comment += '### Issues Found:\n';
              for (let i = 0; i < Math.min(results.issues.length, 10); i++) {
                const issue = results.issues[i];
                comment += `- **${issue.severity.toUpperCase()}**: ${issue.description}\n`;
                comment += `  - File: \`${issue.file}:${issue.line}\`\n`;
                comment += `  - Rule: ${issue.rule}\n\n`;
              }
              
              if (results.issues.length > 10) {
                comment += `... and ${results.issues.length - 10} more issues.\n\n`;
              }
              
              comment += 'üîß **Please fix these security issues before merging.**\n\n';
              comment += 'You can run `gitguardian -path .` locally to see detailed results.';
            }
            
            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('GitGuardian Security Scan Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
          } catch (error) {
            console.error('Error posting comment:', error);
          }

    - name: Generate SARIF report
      if: always()
      run: |
        echo "üîÑ Converting results to SARIF format..."
        
        # Convert JSON results to SARIF format
        cat > convert_to_sarif.py << 'EOF'
        import json
        import sys
        from datetime import datetime

        def convert_to_sarif(input_file, output_file):
            with open(input_file, 'r') as f:
                results = json.load(f)
            
            sarif = {
                "version": "2.1.0",
                "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                "runs": [{
                    "tool": {
                        "driver": {
                            "name": "GitGuardian",
                            "version": "1.0.0",
                            "informationUri": "https://github.com/yourusername/gitguardian",
                            "rules": []
                        }
                    },
                    "results": []
                }]
            }
            
            # Add rules
            rules_seen = set()
            for issue in results.get('issues', []):
                rule_id = issue['rule'].replace(' ', '_').lower()
                if rule_id not in rules_seen:
                    sarif['runs'][0]['tool']['driver']['rules'].append({
                        "id": rule_id,
                        "name": issue['rule'],
                        "shortDescription": {"text": issue['description']},
                        "fullDescription": {"text": issue['description']},
                        "defaultConfiguration": {
                            "level": "error" if issue['severity'] in ['critical', 'high'] else "warning"
                        }
                    })
                    rules_seen.add(rule_id)
            
            # Add results
            for issue in results.get('issues', []):
                rule_id = issue['rule'].replace(' ', '_').lower()
                sarif_result = {
                    "ruleId": rule_id,
                    "ruleIndex": list(rules_seen).index(rule_id),
                    "message": {"text": issue['description']},
                    "level": "error" if issue['severity'] in ['critical', 'high'] else "warning",
                    "locations": [{
                        "physicalLocation": {
                            "artifactLocation": {"uri": issue['file']},
                            "region": {
                                "startLine": issue['line'],
                                "startColumn": issue['column']
                            }
                        }
                    }]
                }
                sarif['runs'][0]['results'].append(sarif_result)
            
            with open(output_file, 'w') as f:
                json.dump(sarif, f, indent=2)

        if __name__ == "__main__":
            convert_to_sarif('scan_results.json', 'gitguardian.sarif')
        EOF
        
        python convert_to_sarif.py

    - name: Upload SARIF to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gitguardian.sarif
        category: gitguardian

    - name: Set status check
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const state = ${{ steps.scan.outcome == 'success' }} ? 'success' : 'failure';
          const description = state === 'success' ? 
            'No security issues found' : 
            'Security issues detected';
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            description: description,
            context: 'GitGuardian Security Scan'
          });

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache GitGuardian binary
      id: cache-gitguardian-deps
      uses: actions/cache@v3
      with:
        path: ~/bin/gitguardian
        key: gitguardian-${{ runner.os }}-v1.0.0

    - name: Download GitGuardian
      if: steps.cache-gitguardian-deps.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/bin
        go build -o ~/bin/gitguardian ./cmd/gitguardian
        chmod +x ~/bin/gitguardian

    - name: Add GitGuardian to PATH
      run: echo "$HOME/bin" >> $GITHUB_PATH

    - name: Run Dependency Scan
      run: |
        echo "üîç Running dependency vulnerability scan..."
        ./gitguardian -path . -deps-only -format json > dependency_results.json
        
        ISSUES_COUNT=$(jq '.summary.total' dependency_results.json 2>/dev/null || echo "0")
        echo "Dependency issues found: $ISSUES_COUNT"
        echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$ISSUES_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è $ISSUES_COUNT dependency vulnerabilities found"
          jq '.issues[] | select(.type == "vulnerability")' dependency_results.json || true
        else
          echo "‚úÖ No dependency vulnerabilities found"
        fi

    - name: Upload dependency scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-results
        path: dependency_results.json
        retention-days: 90

    - name: Create issue for vulnerabilities
      if: github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('dependency_results.json', 'utf8'));
            const vulns = results.issues.filter(issue => issue.type === 'vulnerability');
            
            if (vulns.length > 0) {
              const title = `üö® Security: ${vulns.length} dependency vulnerability(ies) detected`;
              
              let body = '## Dependency Vulnerability Report\n\n';
              body += `**Scan Date**: ${new Date().toISOString()}\n\n`;
              body += `**Total Vulnerabilities**: ${vulns.length}\n\n`;
              
              body += '### Vulnerabilities:\n\n';
              vulns.forEach((vuln, index) => {
                body += `#### ${index + 1}. ${vuln.description}\n`;
                body += `- **File**: \`${vuln.file}\`\n`;
                body += `- **Severity**: ${vuln.severity.toUpperCase()}\n`;
                body += `- **Details**: ${vuln.content}\n\n`;
              });
              
              body += '### Recommended Actions:\n';
              body += '1. Review each vulnerability listed above\n';
              body += '2. Update affected dependencies to secure versions\n';
              body += '3. Run `gitguardian -deps-only` locally for detailed information\n';
              body += '4. Consider using automated dependency update tools\n\n';
              body += '_This issue was automatically created by GitGuardian scheduled scan._';
              
              // Check if similar issue already exists
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'security,dependencies'
              });
              
              const existingIssue = issues.find(issue => 
                issue.title.includes('dependency vulnerability')
              );
              
              if (existingIssue) {
                // Update existing issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: body
                });
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['security', 'dependencies', 'vulnerability']
                });
              }
            }
          } catch (error) {
            console.error('Error creating vulnerability issue:', error);
          }