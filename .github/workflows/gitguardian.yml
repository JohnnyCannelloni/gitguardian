name: GitGuardian Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build GitGuardian
      run: |
        echo "üî® Building GitGuardian..."
        go build -v -o gitguardian .
        chmod +x gitguardian
        
        # Test the binary
        echo "üß™ Testing GitGuardian binary..."
        ./gitguardian -help || {
          echo "‚ùå GitGuardian binary test failed"
          exit 1
        }

    - name: Run Security Scan
      id: security-scan
      run: |
        echo "üîç Running GitGuardian security scan..."
        
        # Initialize results file with default structure
        echo '{"scan_time":"","duration":"","files_scanned":0,"issues":[],"summary":{"critical":0,"high":0,"medium":0,"low":0,"total":0}}' > scan_results.json
        
        # Run the scan and capture output
        if ./gitguardian -path . -format json > temp_results.json 2>scan_error.log; then
          echo "‚úÖ Scan completed successfully"
          mv temp_results.json scan_results.json
          SCAN_EXIT=0
        else
          SCAN_EXIT=$?
          echo "‚ö†Ô∏è Scan completed with exit code: $SCAN_EXIT"
          
          # Check if we got any output despite the exit code
          if [ -s temp_results.json ]; then
            echo "üìÑ Using partial results from scan"
            mv temp_results.json scan_results.json
          fi
        fi
        
        # Parse results safely
        ISSUES_COUNT=$(jq '.summary.total // 0' scan_results.json 2>/dev/null || echo "0")
        echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
        echo "scan_exit_code=$SCAN_EXIT" >> $GITHUB_OUTPUT
        
        echo "üìä Scan Summary:"
        echo "  Files scanned: $(jq '.files_scanned // 0' scan_results.json)"
        echo "  Issues found: $ISSUES_COUNT"
        
        if [ "$ISSUES_COUNT" -gt 0 ]; then
          echo "  Critical: $(jq '.summary.critical // 0' scan_results.json)"
          echo "  High: $(jq '.summary.high // 0' scan_results.json)"  
          echo "  Medium: $(jq '.summary.medium // 0' scan_results.json)"
          echo "  Low: $(jq '.summary.low // 0' scan_results.json)"
        fi

    - name: Run Dependency Scan
      id: dependency-scan
      run: |
        echo "üîç Running dependency vulnerability scan..."
        
        # Initialize dependency results
        echo '{"scan_time":"","duration":"","files_scanned":0,"issues":[],"summary":{"critical":0,"high":0,"medium":0,"low":0,"total":0}}' > dependency_results.json
        
        # Check if deps-only flag is supported
        if ./gitguardian -deps-only -path . -format json > temp_dep_results.json 2>dep_error.log; then
          echo "‚úÖ Dependency scan completed successfully"
          mv temp_dep_results.json dependency_results.json
          DEP_EXIT=0
        else
          DEP_EXIT=$?
          echo "‚ÑπÔ∏è Dependency scanning may not be fully implemented yet (exit code: $DEP_EXIT)"
          
          # Check if we got any output
          if [ -s temp_dep_results.json ]; then
            mv temp_dep_results.json dependency_results.json
          fi
        fi
        
        DEP_ISSUES=$(jq '.summary.total // 0' dependency_results.json 2>/dev/null || echo "0")
        echo "dependency_issues=$DEP_ISSUES" >> $GITHUB_OUTPUT
        echo "dependency_exit_code=$DEP_EXIT" >> $GITHUB_OUTPUT
        
        echo "üì¶ Dependency Summary: $DEP_ISSUES issues found"

    - name: Upload Scan Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results-${{ github.run_number }}
        path: |
          scan_results.json
          dependency_results.json
          scan_error.log
          dep_error.log
        retention-days: 30

    - name: Create Summary Report
      if: always()
      run: |
        echo "## üõ°Ô∏è GitGuardian Security Scan Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Security Scan Results
        echo "### üîç Security Scan" >> $GITHUB_STEP_SUMMARY
        ISSUES_COUNT=$(jq '.summary.total // 0' scan_results.json 2>/dev/null || echo "0")
        FILES_SCANNED=$(jq '.files_scanned // 0' scan_results.json 2>/dev/null || echo "0")
        
        if [ "$ISSUES_COUNT" -eq 0 ]; then
          echo "‚úÖ **No security issues found!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **$ISSUES_COUNT security issues found**" >> $GITHUB_STEP_SUMMARY
          echo "- Critical: $(jq '.summary.critical // 0' scan_results.json)" >> $GITHUB_STEP_SUMMARY
          echo "- High: $(jq '.summary.high // 0' scan_results.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Medium: $(jq '.summary.medium // 0' scan_results.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Low: $(jq '.summary.low // 0' scan_results.json)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- Files scanned: $FILES_SCANNED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Dependency Scan Results  
        echo "### üì¶ Dependency Scan" >> $GITHUB_STEP_SUMMARY
        DEP_ISSUES=$(jq '.summary.total // 0' dependency_results.json 2>/dev/null || echo "0")
        
        if [ "$DEP_ISSUES" -eq 0 ]; then
          echo "‚úÖ **No dependency vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **$DEP_ISSUES dependency vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add troubleshooting info if scans failed
        if [ "${{ steps.security-scan.outputs.scan_exit_code }}" != "0" ]; then
          echo "### üîß Troubleshooting Info" >> $GITHUB_STEP_SUMMARY
          echo "Security scan exit code: ${{ steps.security-scan.outputs.scan_exit_code }}" >> $GITHUB_STEP_SUMMARY
          if [ -f scan_error.log ]; then
            echo "Error log:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 scan_error.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üõ°Ô∏è GitGuardian Security Scan Results\n\n';
          
          try {
            // Read security scan results
            const secResults = JSON.parse(fs.readFileSync('scan_results.json', 'utf8'));
            const secIssues = secResults.summary?.total || 0;
            
            if (secIssues === 0) {
              comment += '‚úÖ **No security issues found!**\n\n';
            } else {
              comment += `‚ö†Ô∏è **${secIssues} security issue(s) found**\n\n`;
              comment += '### Issues Summary:\n';
              comment += `- Critical: ${secResults.summary?.critical || 0}\n`;
              comment += `- High: ${secResults.summary?.high || 0}\n`;
              comment += `- Medium: ${secResults.summary?.medium || 0}\n`;
              comment += `- Low: ${secResults.summary?.low || 0}\n\n`;
            }
            
            // Read dependency results
            const depResults = JSON.parse(fs.readFileSync('dependency_results.json', 'utf8'));
            const depIssues = depResults.summary?.total || 0;
            
            comment += '### üì¶ Dependency Scan:\n';
            if (depIssues === 0) {
              comment += '‚úÖ No dependency vulnerabilities found\n\n';
            } else {
              comment += `‚ö†Ô∏è ${depIssues} dependency vulnerabilities found\n\n`;
            }
            
            comment += `üìä Files scanned: ${secResults.files_scanned || 0}\n`;
            comment += 'üîó View detailed results in the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';
            
          } catch (error) {
            comment += '‚ùå Unable to parse scan results. Check the workflow logs for details.\n';
            console.error('Error parsing results:', error);
          }
          
          // Post comment
          try {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          } catch (error) {
            console.error('Error posting comment:', error);
          }

    - name: Set Workflow Status
      if: always()
      run: |
        ISSUES_COUNT="${{ steps.security-scan.outputs.issues_count }}"
        DEP_ISSUES="${{ steps.dependency-scan.outputs.dependency_issues }}"
        
        if [ "$ISSUES_COUNT" = "0" ] && [ "$DEP_ISSUES" = "0" ]; then
          echo "‚úÖ All security scans passed"
          exit 0
        else
          echo "‚ö†Ô∏è Security issues found - see summary above"
          # Don't fail the workflow for security issues in scheduled runs
          if [ "${{ github.event_name }}" = "schedule" ]; then
            exit 0
          else
            exit 1
          fi
        fi